<?php
/**
 * @file
 * Video Data Module
 */
 
 /**
 * Implements hook_help().
 */
function video_data_help($path, $arg) {
  switch ($path) {
    case 'admin/help#video_data':
      $filepath = dirname(__FILE__) . '/README.md';
      if (file_exists($filepath)) {
        $readme = file_get_contents($filepath);
      }
      else {
        $filepath = dirname(__FILE__) . '/README.txt';
        if (file_exists($filepath)) {
          $readme = file_get_contents($path);
        }
      }
      if (!isset($readme)) {
        return NULL;
      }
      if (module_exists('markdown')) {
        $filters = module_invoke('markdown', 'filter_info');
        $info = $filters['filter_markdown'];
    
        if (function_exists($info['process callback'])) {
          $output = $info['process callback']($readme, NULL);
        }
        else {
          $output = '<pre>' . $readme . '</pre>';
        }
      }
      else {
        $output = '<pre>' . $readme . '</pre>';
      }


      return $output;
  }
}

/**
 * Implements hook_menu().
 * */
function video_data_menu(){
  $items = array();
  $items['admin/config/media/video_data'] = array(
        'title' => 'Video Data',
        'description' => 'Configuration for the Video Data module.',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('video_data_admin_form'),
        'access arguments' => array('administer users'),
        'file' => 'video_data.admin.inc',
        'type' => MENU_NORMAL_ITEM,
        );
  return $items;
}



/* Return Fields Types Abailables and data key for each */
 function _video_data_fields_types($type = FALSE){
  $types =  array('text' => 'value',
                  'video_embed_field' => 'video_url');
                  
 if( $type ){ return $types[$type]; }
 return $types;
 }
 
 /* Return Services by Domain */
function _video_data_services(){
  return array('youtube.com' => 'youtube',
               'vimeo.com' => 'vimeo',
     
 );
}

/* Identify Service and Return Data */
function _video_data_data($url){
 $service =  _video_data_service($url);
  if( $service ){
   $service_hand_func = 'video_data_' . $service . '_handle_data';
   if ( function_exists( $service_hand_func ) ){
    $data = $service_hand_func($url);
     if( $data ){
      $service_data_func = '_video_data_' . $service . '_parse_data';
        if ( function_exists( $service_hand_func ) ){
         return $service_data_func( $data );
        }
     }
   }
  }
return FALSE;
}

 
 /* basic url parsing */
function _video_data_parse_url($url){
  if (!stristr($url, 'http://') && !stristr($url, 'https://')) {
    $url = 'http://' . $url;
  }
  $url_arr = parse_url($url);
  if (isset($url_arr['host'])) {
    return $url_arr;
  }
return FALSE;
}


/* Identify service by domain */
function _video_data_service($url){
 $url_arr = _video_data_parse_url($url);
  
  if( is_array($url_arr) ){
   $services =  _video_data_services();
   $domain = str_replace('www.', '', $url_arr['host']);
    
    if( isset( $services[$domain] ) ){
     return $services[$domain];
    }
  }
}

/* Return video URL from Node Field*/
function _video_data_node_url_data($node, $map, $delta){
 if( $map[$node->type] ){
  if( isset($node ->$map[$node->type] ) && !empty( $node->$map[$node->type] ) ){
   $file_info  = field_info_field($map[$node->type]);
   $k = _video_data_fields_types($file_info['type']);
    if( $k ){
     $value = $node -> $map[$node->type];
     return $value[LANGUAGE_NONE][$delta][$k];
    }
  }
 }
 return FALSE;
}


/*
 * Calculates the min index for use in finding the id of a youtube video.
 *
 * @param string $pos1
 *   The first index.
 * @param string $pos2
 *   The second index.
 *
 * @return string
 *   The min index.
 */
function _video_data_get_min($pos1, $pos2) {
  if (!$pos1) {
    return $pos2;
  }
  elseif (!$pos2) {
    return $pos1;
  }
  else {
    return min($pos1, $pos2);
  }
}